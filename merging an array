#include<stdio.h>
struct Array
{
 int A[10];
 int size;
 int length;
};
 void Display(struct Array arr)
 {
 int i;
 printf("\nElements are\n");
 for(i=0;i<arr.length;i++)
 printf("%d ",arr.A[i]);
 }
void swap(int *x,int *y)
 {
 int temp=*x;
 *x=*y;
 *y=temp;
 }
int LinearSearch(struct Array *arr,int key)
{
 int i;
 for(i=0;i<arr->length;i++)
 {
 if(key==arr->A[i])
 {
 swap(&arr->A[i],&arr->A[0]);
 return i;
 }
 }
 return -1;
}

int get(struct Array arr  , int index)
{
    if(index>=0 && index<arr.length)
    {
    return arr.A[index];
    }
        return -1;
}
    

    void set(struct Array *arr , int index , int x)
    {
        if(index>=0 && index<arr->length)
        {
            arr->A[index] = x;
        }
        
    }

    int max(struct Array arr )
    {
        int max = arr.A[0];
        int i;
        for(i=1; i<arr.length; i++)
        {
            if(arr.A[i]>max)
            max = arr.A[i];
        }

        return max;

    }

    int min(struct Array arr )
    {
        int min = arr.A[0];
        int i;
        for(i=1; i<arr.length; i++)
        {
            if(arr.A[i]<min)
            min = arr.A[i];
        }

        return min;

    }


int sum(struct Array arr)
{
    int s = 0;
    int i;
    for(i=0; i<arr.length; i++)
       s+= arr.A[i];

       return s;
}

float avg(struct Array arr)
{
    return (float)sum(arr)/arr.length;
}

//reversing an array 
void Reverse(struct Array *arr)
{
    int i , j;
    for(int i = 0 , j = arr->length-1; i<j; i++ , j--)
    {
        swap(&arr->A[i] , &arr->A[j]);
    }
}

//rotating the array is sorted or not 

void leftshift(struct Array *arr)
{
    int i , j;
    for (i = 0; i<arr->length; i++)
    {
        int j , first;
        first = arr->A[0];

        for(j=0; j<arr->length-1; j++)
        {
            arr->A[j] = arr->A[j+1];
        }

        arr->A[j] = first;

    }
}

struct Array* merge(struct Array *arr1 , struct Array *arr2)
{
    int i , j , k;
    i=j=k=0;
    struct Array *arr3 = (struct Array *)malloc(sizeof (struct Array));

    while(i<arr1->length && j<arr2->length)

    if(arr1->A[i]<arr2->A[j])
    arr3->A[k++]=arr1->A[i++];

    else
    arr3->A[k++]=arr2->A[j++];

    for(;i<arr1->length; i++)
    arr3->A[k++] = arr1->A[i];

    for(;j<arr2->length; j++)
    arr3->A[k++]=arr2->A[j];

    arr3->length = arr1->length + arr2->length;
    arr3->size = 10;

    return arr3;   
}
int main()
{
 struct Array arr1 = {{2,6,10,15,25},10,5};
 struct Array arr2 = {{3,4,7,18,20},10,5};
 struct Array *arr3;

 arr3 = merge(&arr1 , &arr2);
 display(*arr3);
 
 
 return 0;
}
