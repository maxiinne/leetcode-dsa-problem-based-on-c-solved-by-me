//sqrt root of any integer using binary search with float value
#include <iostream>

long long int sqrtinteger(int n){

    int s = 0;
    int e = n ;
    long long int mid = s + (e-s)/2;

    long long int ans = -1;


    while(s<=e)
    {
        long long int square = mid*mid;

        if(square == n)

        {
            return mid;
        }

        else if(square < n){

        ans = mid;
        s = mid+1;
    }

    else{

        e = mid-1;
    }

    mid = s +(e-s)/2;
    }
    return ans;
}



    int mySqrt(int x) {

        return sqrtinteger(x);
        
    }
}

double moreprecision(int n , int precision , int tempsol)
{
   double tempsol = ans;
   double factor = 1;
   
   for(int i = 0; i<precision ; i++)
   {
       factor = factor/10;
       
       for(double j = ans; j*j<n; j = j+factor)
       
       {
           j = ans;
       }
       
   }
   return ans;
}

int main() {
    int n ;
    cout<<"enter the number"<<endl;
    cin>>n;
    
    int tempsol = sqrtinteger(n);
    cout<<"answer is"<<moreprecision(n , 3 , tempsol)<<endl;
    
   return 0;
  

}
